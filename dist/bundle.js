/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};
/*!*********************!*\
  !*** ./src/game.ts ***!
  \*********************/

// import EventModule from './event.ts';
const GAME_BOARD = [
    "~~~~~~~~~~~~~~~~~~~~",
    "~~~~~~~~~~~~~~~~~~~~",
    "~~~~~~~~~~~~~~~~~~~~",
    "~~~~~~~~~~~~~~~~~~~~",
    "~~~~~~~~~~~~~~~~~~~~"
];
const LOW_LEVEL_PLANTS = ['.', ','];
const MED_LEVEL_PLANTS = ['*', '~', '^'];
const HIGH_LEVEL_PLANTS = ['#', '%', '&'];
const NUM_OPEN_SPACES = 100;
const INVENTORY_SPACE = 15;
const START_PLANTS = 3;
function getRandomElementFromArray(arr) {
    // Check if the array is empty
    if (arr.length === 0) {
        return ""; // Return undefined if the array is empty
    }
    // Generate a random index between 0 and the length of the array minus 1
    const randomIndex = Math.floor(Math.random() * arr.length);
    // Return the random element from the array
    return arr[randomIndex];
}
class EventHandler {
    constructor(plot, inventory, market) {
        this.plot = plot;
        this.inventory = inventory;
        this.market = market;
        this.initializeEventListeners();
    }
    initializeEventListeners() {
        this.initializePlot();
        this.initializeInventory();
        this.initializeMarket();
    }
    // TODO populate rows at once instead of incrementally
    initializePlot() {
        let counter = 0;
        for (let i = 0; i < this.plot.board.length; i++) {
            let row = this.plot.board[i];
            for (let j = 0; j < row.length; j++) {
                let char = row[j];
                let $span = $(`<span id=slot${counter}>`).text(char);
                $span.addClass("slot");
                counter += 1;
                $span.on('mouseover', this.plot.displayPlant)
                    .on('mouseleave', () => { $("#selectedSpace").html(""); });
                $("#plot1").append($span);
            }
            $("#plot1").append('\n');
        }
    }
    initializeInventory() {
        for (let i = 0; i < INVENTORY_SPACE; i++) {
            let $space = $(`<div id=inventory${i}>`).text("empty");
            $("#inventory_contents").append($space);
            $space.on("mouseover", () => {
                $space.addClass("hovering");
            }).on("mouseleave", () => {
                $space.removeClass("hovering");
            }).on("click", () => {
                $space.removeClass("hovering");
                $space.addClass("selected");
                $space.on("click", () => {
                    $space.removeClass("selected");
                });
                let parsedString = this.parseString($space.html());
                if (parsedString !== "") {
                    this.addPlantSeed(parsedString);
                }
            });
        }
    }
    parseString(str) {
        const inputString = "- wheat: 3";
        const match = inputString.match(/\b\w+\b/);
        if (match) {
            return match[0];
        }
        else {
            return "";
        }
    }
    addPlantSeed(seed) {
        $("#board_container").children().each((index, board) => {
            $(board).children().each((index, element) => {
                $(element).on("mouseover", () => {
                    $(element).addClass("hovering");
                }).on("mouseleave", () => {
                    $(element).removeClass("hovering");
                }).on("click", () => {
                    $(element).removeClass("hovering");
                    this.plot.plant(index, seed);
                });
            });
        });
    }
    initializeMarket() {
    }
}
class Plant {
    constructor(species) {
        this.level = 0;
        this.species = species;
    }
    display() {
        // TODO
    }
}
class Plot {
    constructor() {
        this.board = GAME_BOARD;
        this.contents = new Map();
        this.displayPlant = this.displayPlant.bind(this);
    }
    displayPlant(event) {
        let slot = event.target;
        let id = slot.id[5];
        if (this.contents.has(id)) {
            let plant = this.contents.get(id);
            if (plant) {
                plant.display();
            }
        }
        else {
            $("#selectedSpace").html("empty");
        }
    }
    plant(id, seed) {
        let space = $(`#slot${id}`);
        let icon = getRandomElementFromArray(LOW_LEVEL_PLANTS);
        space.html(icon);
        space.css("color", "green");
        this.contents.set(id, new Plant(seed));
        return true;
    }
}
class Inventory {
    constructor() {
        this.contents = new Map();
        this.insert("wheat", START_PLANTS);
    }
    selectSpace() {
        $("#plot1").children().each((index, element) => {
            $(element).on("mouseenter", () => {
                $(element).addClass("hovering");
            }).on("mouseleave", () => {
                $(element).removeClass("hovering");
            }).on("click", () => {
                $(element).removeClass("hovering");
            });
        });
    }
    insert(seed, number) {
        for (let i = 1; i <= INVENTORY_SPACE; i++) {
            if (!this.contents.hasOwnProperty(i)) {
                let val = {
                    plant: seed,
                    quantity: number
                };
                this.contents.set(i, val);
                return i;
            }
        }
        return 0;
    }
}
class Market {
}
class Game {
    constructor() {
        this.plot = new Plot();
        this.inventory = new Inventory();
        this.market = new Market();
        this.eventHandler = new EventHandler(this.plot, this.inventory, this.market);
        this.inventory.insert("wheat", 3);
        $("#inventory0").html("- wheat: 3");
    }
}
// const test = EventModule;
const game = new Game();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,