/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};
/*!*********************!*\
  !*** ./src/game.ts ***!
  \*********************/

const GAME_BOARD = [
    "~~~~~~~~~~~~~~~~~~~~",
    "~~~~~~~~~~~~~~~~~~~~",
    "~~~~~~~~~~~~~~~~~~~~",
    "~~~~~~~~~~~~~~~~~~~~",
    "~~~~~~~~~~~~~~~~~~~~"
];
const PLANT_STAGES = ["germinating", "seedling", "mature"];
const LOW_LEVEL_PLANTS = ['.', ','];
const MED_LEVEL_PLANTS = [';', ':'];
const HIGH_LEVEL_PLANTS = ['Y', 'T', 'V'];
const PLANT_LEVELS = {
    wheat: {
        maturity: 10, // in seconds
        worth: 1,
    },
};
const PLANT_ICONS = {
    "germinating": LOW_LEVEL_PLANTS,
    "seedling": MED_LEVEL_PLANTS,
    "mature": HIGH_LEVEL_PLANTS
};
const NUM_OPEN_SPACES = 100;
const INVENTORY_SPACE = 15;
const START_PLANTS = 3;
function getRandomElementFromArray(arr) {
    if (arr.length === 0) {
        return "";
    }
    const randomIndex = Math.floor(Math.random() * arr.length);
    return arr[randomIndex];
}
// Controller superclass for hoverable/selectable elems
class Hoverable {
    constructor(htmlElem, parentElem) {
        this.htmlElem = htmlElem;
        this.parentElem = parentElem;
        this.addHovering = this.addHovering.bind(this);
        this.removeHovering = this.removeHovering.bind(this);
        this.appendToParent();
    }
    initHover(onClick, arg, onHover, onRemoveHover) {
        this.htmlElem
            .on("mouseover", () => {
            if (onHover) {
                onHover();
            }
        })
            .on("mouseleave", () => {
            if (onRemoveHover) {
                onRemoveHover();
            }
        })
            .on("click", () => onClick(arg));
    }
    addHovering() {
        this.htmlElem.addClass("hovering");
    }
    removeHovering() {
        this.htmlElem.removeClass("hovering");
    }
    appendToParent() {
        this.parentElem.append(this.htmlElem);
    }
}
// Controller for individual spans
class Span extends Hoverable {
    constructor(id, plant) {
        super($(`<span id=slot${id}>`), $("#plot1"));
        this.id = id;
        this.plant = plant;
        this.selectPlotSpace = this.selectPlotSpace.bind(this);
        this.onPlotHover = this.onPlotHover.bind(this);
        this.onPlotRemoveHover = this.onPlotRemoveHover.bind(this);
        this.initHover(this.selectPlotSpace, null, this.onPlotHover, this.onPlotRemoveHover);
        this.setTilde();
    }
    displayPlant() {
        if (this.plant) {
            $(`#selectedSpace`).html(`${this.plant.species}, ${this.plant.stage}`);
            if (this.plant && this.plant.isMature()) {
                $(`#selectedSpace`).append("<br>click to harvest");
            }
        }
        else {
            $(`#selectedSpace`).html("empty");
        }
    }
    addPlantSeed(seed, plantSeed) {
        this.htmlElem.on("click", () => {
            plantSeed();
        });
    }
    removePlantSeed() {
        this.htmlElem.off("mouseover", this.addHovering)
            .off("mouseleave", this.removeHovering)
            .off("click");
    }
    onPlotHover() {
        this.updateSelectedPlotSpace();
        this.addHovering();
    }
    onPlotRemoveHover() {
        this.removeSelectedPlotSpace();
        this.removeHovering();
    }
    updateSelectedPlotSpace() {
        if (this.plant) {
            $(`#selectedSpace`).html(`${this.plant.species}, ${this.plant.stage}`);
            if (this.plant && this.plant.isMature()) {
                $(`#selectedSpace`).append("<br>click to harvest");
            }
        }
        else {
            $(`#selectedSpace`).html("empty");
        }
    }
    removeSelectedPlotSpace() {
        $(`#selectedSpace`).html("");
    }
    setTilde() {
        this.htmlElem.html("~");
    }
    selectPlotSpace() {
        if (!this.plant) {
            this.populateSpace();
        }
        else if (this.plant.isMature()) {
            this.clearSpace();
        }
    }
    populateSpace() {
        this.htmlElem.html(getRandomElementFromArray(LOW_LEVEL_PLANTS));
        this.htmlElem.css("color", "green");
    }
    clearSpace() {
        this.htmlElem.html("~");
        this.htmlElem.css("color", "brown");
    }
}
class InventorySlot extends Hoverable {
    constructor(id, seed, quantity, onClick, disablePlantSeed) {
        super($(`<div id=inventory${id}>`), $("#inventory_contents"));
        this.id = id;
        this.seed = seed;
        this.quantity = quantity;
        this.onClick = onClick;
        this.disablePlantSeed = disablePlantSeed;
        this.select = this.select.bind(this);
        this.deselect = this.deselect.bind(this);
        ;
        this.initHover(() => {
            this.onClick(this);
        }, null, this.addHovering, this.removeHovering);
        this.updateState();
    }
    select() {
        this.htmlElem.off("click");
        this.htmlElem.addClass("selected");
        this.htmlElem.on("click", () => {
            this.deselect();
            this.disablePlantSeed();
        });
    }
    decrement() {
        this.quantity -= 1;
        this.updateState();
    }
    updateState() {
        if (this.quantity === 0) {
            this.seed = "";
            this.deselect();
            this.htmlElem.html("- empty");
        }
        else {
            this.htmlElem.html(`- ${this.seed}: ${this.quantity}`);
        }
    }
    deselect() {
        this.htmlElem.off("click");
        this.htmlElem.removeClass("selected");
        this.htmlElem.on("click", () => {
            this.onClick(this);
        });
    }
}
// Model for localStorage API
class LocalStorage {
    constructor() { }
    update(data, plotSize) {
        let clientData = localStorage.getItem('clientData');
        if (clientData) {
            let parsedData = this.parseClientData(clientData);
            if (plotSize >= parsedData.length) {
                localStorage.setItem('clientData', data);
            }
        }
        else {
            localStorage.setItem('clientData', data);
        }
    }
    load() {
        let fetchedData = localStorage.getItem('clientData');
        if (fetchedData) {
            return JSON.parse(fetchedData);
        }
    }
    parseClientData(data) {
        let parsedArray = JSON.parse(data);
        return parsedArray;
    }
}
// Controller for global event listeners
class EventHandler {
    constructor(plot, inventory, market) {
        this.plot = plot;
        this.inventory = inventory;
        this.market = market;
        this.spans = new Map();
        this.localStorage = new LocalStorage();
        this.selectSlot = this.selectSlot.bind(this);
        this.updateClientStorage = this.updateClientStorage.bind(this);
        this.addPlantHandlers = this.addPlantHandlers.bind(this);
        this.removePlantHandlers = this.removePlantHandlers.bind(this);
        this.initializeEventListeners();
        this.addLoad();
        setInterval(() => {
            this.updateClientStorage();
        }, 1000);
    }
    initializeEventListeners() {
        this.initializePlot();
        this.initializeInventory();
        this.initializeMarket();
    }
    // TODO populate rows at once instead of incrementally
    initializePlot() {
        let counter = 0;
        for (let i = 0; i < this.plot.board.length; i++) {
            let row = this.plot.board[i];
            for (let j = 0; j < row.length; j++) {
                let char = row[j];
                // $("#plot1").append($(`<span id=slot${counter}>`).text(char));
                let span = new Span(counter, null);
                counter += 1;
                this.spans.set(counter, span);
            }
            $("#plot1").append('\n');
        }
    }
    initializeInventory() {
        let firstInventorySlot = new InventorySlot(0, "wheat", 3, this.selectSlot, this.removePlantHandlers);
        for (let i = 1; i < INVENTORY_SPACE; i++) {
            let inventorySlot = new InventorySlot(i, "", 0, this.selectSlot, this.removePlantHandlers);
        }
    }
    selectSlot(inventorySlot) {
        event === null || event === void 0 ? void 0 : event.preventDefault();
        if (inventorySlot.seed) {
            inventorySlot.select();
            this.addPlantHandlers(inventorySlot);
        }
        else {
            alert("Slot empty");
        }
    }
    addPlantHandlers(inventorySlot) {
        for (let [slotID, span] of this.spans) {
            span.addPlantSeed(inventorySlot.seed, () => {
                this.plantSeed(span, inventorySlot);
            });
        }
    }
    removePlantHandlers() {
        for (let [slotID, span] of this.spans) {
            span.removePlantSeed();
        }
    }
    plantSeed(plotSpace, inventorySlot) {
        let seed = inventorySlot.seed;
        let plant = this.plot.plant(plotSpace.id, seed);
        plotSpace.plant = plant;
        this.inventory.remove(seed);
        inventorySlot.decrement();
    }
    updateClientStorage() {
        let plotData = JSON.stringify(Array.from(this.plot.contents));
        this.localStorage.update(plotData, this.plot.contents.size);
    }
    addLoad() {
        window.addEventListener('load', () => {
            if (localStorage.getItem('clientData') === null) {
                localStorage.setItem('clientData', "[]");
            }
            else {
                this.loadClientStorage();
            }
        });
    }
    loadClientStorage() {
        let data = this.localStorage.load();
        if (data) {
            for (let [key, plant] of data) {
                let plantInstance = new Plant(plant.species, plant.slotID, plant.level);
                this.plot.set(plant.slotID, plantInstance);
                // TODO update spans
                this.updateSpan(plant.slotID + 1, plantInstance);
            }
        }
    }
    updateSpan(slotID, plant) {
        let span = this.spans.get(slotID);
        if (span) {
            span.plant = plant;
            span.htmlElem.html(plant.icon);
            span.htmlElem.addClass("plant");
        }
    }
    initializeMarket() {
    }
}
class Plant {
    constructor(species, slotID, level) {
        this.species = species;
        this.slotID = slotID;
        this.level = level; // seconds since plant
        this.maturity = PLANT_LEVELS[this.species].maturity;
        this.halfwayMature = this.maturity / 2;
        this.stage = this.getStage();
        this.icon = this.getIcon();
        this.harvest = this.harvest.bind(this);
        this.updateSlot();
        // TODO Clean up
        if (this.isMature()) {
            $(`#slot${this.slotID}`).html(this.icon);
        }
    }
    levelUp() {
        this.level += 1;
        if (this.level === this.halfwayMature) {
            this.updateStage(PLANT_STAGES[1]);
        }
        else if (this.level === this.maturity) {
            this.updateStage(PLANT_STAGES[2]);
        }
    }
    isMature() {
        return (this.stage === PLANT_STAGES[-1]);
    }
    getStage() {
        let i = Math.floor(this.level / (this.maturity / 2));
        if (i > 2)
            i = 2;
        return PLANT_STAGES[i];
    }
    getIcon() {
        return getRandomElementFromArray(PLANT_ICONS[this.stage]);
    }
    updateStage(stage) {
        this.stage = stage;
        this.icon = this.getIcon();
        if ($("#selectedSpace").html() !== "") {
            // this.display();
        }
        this.updateSlot();
    }
    updateSlot() {
        $(`#slot${this.slotID}`).html(this.icon);
    }
    // private isMature(): boolean {
    //     return (this.level >= this.maturity);
    // }
    // TODO
    harvest() {
        $(`#slot${this.slotID}`).html("~");
        $(`#slot${this.slotID}`).css("color", "green");
    }
}
class Plot {
    constructor() {
        this.board = GAME_BOARD;
        this.contents = new Map();
        this.displayPlant = this.displayPlant.bind(this);
        setInterval(() => {
            this.updatePlants();
        }, 1000);
    }
    displayPlant(event) {
        let slot = event.target;
        let id = parseInt(slot.id.slice(4, slot.id.length));
        if (this.contents.has(id)) {
            let plant = this.contents.get(id);
            if (plant) {
                // plant.display();
            }
        }
        else {
            $("#selectedSpace").html("empty");
        }
    }
    plant(id, seed) {
        let plant = new Plant(seed, id, 0);
        // plant.display();
        this.set(id, plant);
        return plant;
    }
    harvest(id) {
        this.contents.delete(id);
    }
    updatePlants() {
        for (let [id, plant] of this.contents) {
            plant.levelUp();
        }
    }
    isOccupied(i) {
        return (this.contents.has(i));
    }
    getPlant(i) {
        return (this.contents.get(i));
    }
    set(id, plant) {
        this.contents.set(id, plant);
    }
}
class Inventory {
    constructor() {
        this.contents = new Map();
    }
    get(seed) {
        let quantity = this.contents.get(seed);
        if (quantity) {
            return quantity;
        }
        else {
            return null;
        }
    }
    insert(seed, number) {
        let quantity = this.get(seed);
        if (quantity) {
            this.contents.set(seed, quantity + number);
        }
        else {
            this.contents.set(seed, number);
        }
    }
    remove(seed) {
        let quantity = this.get(seed);
        if (quantity) {
            this.contents.set(seed, quantity - 1);
            if (this.get(seed) === 0) {
                this.contents.delete(seed);
            }
        }
    }
    contains(seed) {
        return (this.get(seed) !== null);
    }
}
// TODO
class Market {
}
function clearLocalStorage(event) {
    if (event.code === "Space") {
        localStorage.clear();
        alert("Cleared local storage");
        window.location.reload();
    }
}
class Game {
    constructor() {
        this.plot = new Plot();
        this.inventory = new Inventory();
        this.market = new Market();
        this.eventHandler = new EventHandler(this.plot, this.inventory, this.market);
        this.inventory.insert("wheat", 3);
        $("#inventory0").html("- wheat: 3");
        document.addEventListener("keydown", clearLocalStorage); // for debugging
    }
    onLoad(clientData) {
        let data = JSON.parse(clientData);
        this.loadData(data);
    }
    loadData(data) {
        for (let [key, plant] of data) {
            let plantInstance = new Plant(plant.species, plant.slotID, plant.level);
            this.plot.set(plant.slotID, plantInstance);
            $(`#slot${plant.slotID}`).html(plantInstance.icon);
            $(`#slot${plant.slotID}`).css("color", "green");
        }
    }
}
const game = new Game();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,