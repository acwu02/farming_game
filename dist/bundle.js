/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};
/*!*********************!*\
  !*** ./src/game.ts ***!
  \*********************/

const GAME_BOARD = [
    "~~~~~~~~~~~~~~~~~~~~",
    "~~~~~~~~~~~~~~~~~~~~",
    "~~~~~~~~~~~~~~~~~~~~",
    "~~~~~~~~~~~~~~~~~~~~",
    "~~~~~~~~~~~~~~~~~~~~"
];
class Plant {
    constructor(name) {
        this.level = 0;
        this.name = name;
    }
    display() {
    }
}
class Plot {
    constructor(board) {
        this.contents = [];
        this.board = board;
        this._initializeEventListeners();
    }
    // TODO build rows at once instead of incrementally
    _initializeEventListeners() {
        for (let i = 0; i < this.board.length; i++) {
            let row = this.board[i];
            for (let j = 0; j < row.length; j++) {
                let char = row[j];
                let $span = $('<span>').text(char);
                $span.on('mouseover', this._displayPlant);
                $span.on('mouseleave', () => {
                    $("#selectedSpace").html("");
                });
                $("#board").append($span);
            }
            $("#board").append('\n');
        }
    }
    _displayPlant(event) {
        let slot = event.target;
        let id = slot.id[5];
        if (id) {
            let plant = this.contents[id];
            plant.display();
        }
        else {
            $("#selectedSpace").html("empty");
        }
    }
}
class Inventory {
}
class Market {
}
class Game {
    constructor() {
        this.plot = new Plot(GAME_BOARD);
        $("#market").click(() => {
            alert("market");
        });
        $("#inventory").click(() => {
            alert("inventory");
        });
    }
}
const game = new Game();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RUQsTUFBTSxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xzLy4vc3JjL2dhbWUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgR0FNRV9CT0FSRCA9IFtcbiAgICBcIn5+fn5+fn5+fn5+fn5+fn5+fn5+XCIsXG4gICAgXCJ+fn5+fn5+fn5+fn5+fn5+fn5+flwiLFxuICAgIFwifn5+fn5+fn5+fn5+fn5+fn5+fn5cIixcbiAgICBcIn5+fn5+fn5+fn5+fn5+fn5+fn5+XCIsXG4gICAgXCJ+fn5+fn5+fn5+fn5+fn5+fn5+flwiXG5dO1xuXG5jbGFzcyBQbGFudCB7XG4gICAgcHJpdmF0ZSBsZXZlbDogbnVtYmVyO1xuICAgIHByaXZhdGUgbmFtZTogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IobmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMubGV2ZWwgPSAwO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIH1cblxuICAgIHB1YmxpYyBkaXNwbGF5KCk6IHZvaWQge1xuXG4gICAgfVxufVxuXG5jbGFzcyBQbG90IHtcbiAgICBwcml2YXRlIGJvYXJkOiBzdHJpbmdbXTtcbiAgICBwcml2YXRlIGNvbnRlbnRzOiBQbGFudFtdID0gW107XG5cbiAgICBjb25zdHJ1Y3Rvcihib2FyZDogc3RyaW5nW10pIHtcbiAgICAgICAgdGhpcy5ib2FyZCA9IGJvYXJkO1xuICAgICAgICB0aGlzLl9pbml0aWFsaXplRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9XG5cbiAgICAvLyBUT0RPIGJ1aWxkIHJvd3MgYXQgb25jZSBpbnN0ZWFkIG9mIGluY3JlbWVudGFsbHlcbiAgICBwcml2YXRlIF9pbml0aWFsaXplRXZlbnRMaXN0ZW5lcnMoKTogdm9pZCB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5ib2FyZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IHJvdyA9IHRoaXMuYm9hcmRbaV07XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHJvdy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIGxldCBjaGFyID0gcm93W2pdO1xuICAgICAgICAgICAgICAgIGxldCAkc3BhbiA9ICQoJzxzcGFuPicpLnRleHQoY2hhcik7XG4gICAgICAgICAgICAgICAgJHNwYW4ub24oJ21vdXNlb3ZlcicsIHRoaXMuX2Rpc3BsYXlQbGFudCk7XG4gICAgICAgICAgICAgICAgJHNwYW4ub24oJ21vdXNlbGVhdmUnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICQoXCIjc2VsZWN0ZWRTcGFjZVwiKS5odG1sKFwiXCIpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgJChcIiNib2FyZFwiKS5hcHBlbmQoJHNwYW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJChcIiNib2FyZFwiKS5hcHBlbmQoJ1xcbicpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfZGlzcGxheVBsYW50KGV2ZW50OiB7IHRhcmdldDogYW55OyB9KTogdm9pZCB7XG4gICAgICAgIGxldCBzbG90ID0gZXZlbnQudGFyZ2V0O1xuICAgICAgICBsZXQgaWQgPSBzbG90LmlkWzVdO1xuICAgICAgICBpZiAoaWQgKSB7XG4gICAgICAgICAgICBsZXQgcGxhbnQgPSB0aGlzLmNvbnRlbnRzW2lkXTtcbiAgICAgICAgICAgIHBsYW50LmRpc3BsYXkoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICQoXCIjc2VsZWN0ZWRTcGFjZVwiKS5odG1sKFwiZW1wdHlcIik7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNsYXNzIEludmVudG9yeSB7XG5cbn1cblxuY2xhc3MgTWFya2V0IHtcblxufVxuXG5jbGFzcyBHYW1lIHtcbiAgICBwcml2YXRlIHBsb3Q6IFBsb3Q7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5wbG90ID0gbmV3IFBsb3QoR0FNRV9CT0FSRCk7XG4gICAgICAgICQoXCIjbWFya2V0XCIpLmNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgIGFsZXJ0KFwibWFya2V0XCIpO1xuICAgICAgICB9KTtcbiAgICAgICAgJChcIiNpbnZlbnRvcnlcIikuY2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgYWxlcnQoXCJpbnZlbnRvcnlcIik7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuY29uc3QgZ2FtZSA9IG5ldyBHYW1lKCk7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9